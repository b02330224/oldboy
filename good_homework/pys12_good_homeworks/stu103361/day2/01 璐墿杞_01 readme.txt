# 打印购物列表
# 死循环
# 预算多少钱
# 1、iphone6s 6099
# 2、mac      8888
#
# 输入要买的:1
# 一把iphone加入购物车，还剩多少钱?
# 最后退出：
# 打印已购商品，同时结余

#整体思路：
# 逻辑分支
# 1 商品编码为空
# 2 商品编码不存在
# 3 商品编码存在
#   a 待支付的钱小于用户预算，可以继续购买
#   b 待支付的钱大于等于用户预算，提示余额和还差多少钱
#     1按q退出整个程序，打印购物清单，显示余额
#     2按b返回上一级菜单，要求用户输入商品编号
#     3按其他指令，提示指令无效，重新输入

# 步骤：
# 1读文件到内存，构建字典
# 2修改内存中字典的购物数量
# 3将修改后的购物数量写入到新的文件
# 4打印购物清单

# 购物车余额单独存文件、数据库、json、pickle--钱在第一次退出后，下次再进来还能看到余额-
# 1、余额存在单独文件中，读出来存在列表
# 2、列表中修改余额
# 3、将修改后的余额写入文件

# 涉及的知识点
# 1提示语颜色
# 2异常处理-如果购买数量或者价格不是数字，就把购买数量置为数字0，价格置为数字7777
# 3打印购物清单，对齐显示购物清单，左对齐
#   print ('%-11s%-11s%-11s%-11s' % (l_list[0], l_list[1],l_list[2], l_list[3]))
# 4显示余额和差额数学计算
# 5 字典构建
#   shop_dict[line_list[0]] = {"goods":line_list[1],"price":int(line_list[-2]),"times":int(line_list[-1])}

# 踩过的坑：84行 106行  (debug print)--3hour
# 84行 当商品总价格超过用户预算的时候，就不要再累加商品价格了，否则会出现98行，余额是负数的情况
# 106行 返回上一级的时候，最后一个商品由于预算不够，所以必须要扣减最后一个商品的价格

#退出后显示余额，踩过的坑：
# 1、余额先从str转换成int后，必须从int转换成str，否则181行报错 my_str = "|".join(yue_list)
# 2、原始的余额是10000，存在文件中，每买一件商品，余额必须扣减商品的价格  yue_list[-1] -= total
     #否则，余额无法改变（购买数量+=1;余额-=商品价格；错误登录次数+=1）


