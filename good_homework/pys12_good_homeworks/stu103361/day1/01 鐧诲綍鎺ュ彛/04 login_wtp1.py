__author__ = 'Administrator'
# -*- coding:utf-8 -*-
import getpass

# 整体思路：
# 分支1：用户名为空
# 分支2：用户名不存在
# 分支3：用户名密码正确，登录成功，登录此次置为1
# 分支4：用户名正确，但是登录次数大于3，锁定
# 分支5：用户名正确，密码每错误一次，登录次数加1，登录次数为3的时候，锁定
# （这里每次密码错误，只会要求重新输入密码，不用再次输入用户名了）

# 登录接口涉及知识点：
# 1、字典和列表的取值方式：列表通过索引取出用户名、密码、错误登录次数；字典通过key取值
# 2、读写文件
#    1、读文件：1for遍历 2strip去换行 3split拆成列表 4错误登录次数转换成数字，便于计算 5将2个子列表append到空列表中
#    2、写文件：1列表最后一项错误登录次数转换成str 2将列表用;连接符join成字符串作为列表的元素，append到空列表2
#       3光标来到文件最开始seek(0) 4将空列表2的2个元素用连接符\n连接join成一个换行的2行字符串
#       5写入文件 6关闭文件
# 3、多次嵌套循环的跳出
# 4、异常处理：错误登录次数不少数字，锁定
# 5、用户是否存在的标识flag
# 6、颜色提示语
#    加颜色：成功绿色 失败红色
#    '\033[32;1m登录成功，欢迎%s\033[0m'     --绿色
#    '\033[31;1m用户"%s"已锁定，请联系管理员\033[0m'   --红色
# 7、getpass不明文显示密码

while True:  #定义一个外循环，用户名为空或者不存在的情况，会重复要求输入
    old_list = []  #定义空列表1，用于将文件中读取的字符串去换行符strip,split拆分成字符串作为元素存到列表
    new_list = [] #定义空列表2，用于将修改了登录次数的列表，join成字符串添加到空列表中
    flag = 0 #定义flag，用于判断输入的用户是否存在，存在将flag置为1，不存在flag==0，代表用户不存在

    #读文件
    f = open("userinfo.txt","r+") #读写模式读取文件到内存
    for i in f:  #遍历文件
        line_list =  i.strip().split(";")  #['jack', '123', '0'] 将字符串去换行符,拆分成列表
        old_list.append(line_list)  #[['jack', '123', '0'], ['tom', '123', '0']] 将2个子列表添加到空列表1中
        try:
            line_list[-1] = int(line_list[-1])  #将登陆次数转换成int，方便计算（登陆次数+1）
        except Exception,e:
            line_list[-1] =3  #处理异常，如果登录次数无法转换成int，说明不是数字字符，就置为登陆次数是3，锁定

    username = raw_input("请输入用户名:") #要求用户输入用户名

    if len(username)==0:  #如果用户输入的用户名是空
        print "\033[31;1m用户名不能为空\033[0m"
        continue    #跳出本次循环（本次迭代），进行下一次循环

    for j in old_list:  #遍历列表，得到2个子列表
        # print j   #['jack', '123', 0]
        # print j[0]
        if username == j[0]:   #如果用户输入的用户名正确，j[0]代表文件中用户名字段
            flag = 1  #用户标识变成1
            while True:   #定义一个内循序，用于要求用户输入密码，密码不对的情况，会重复要求输入，直到输入正确或者break
                passwd = raw_input("请输入密码:")#要求用户输入密码
                # passwd = getpass.getpass("请输入密码:")  #getpass不显示密码密文
                if passwd == j[1] and j[-1] <3: #用户输入的密码和列表的第2项（密码字段）对比，且列表最后1项（登录错误次数）<3
                    j[-1] = 0 # 列表最后1项（登录错误次数）置为0
                    print "\033[32;1m登录成功，欢迎 %s\033[0m" % username  #绿色字体提示成功
                    break  #跳出内循环while（不会要求再次输入密码）
                elif j[-1] >=3: #列表最后1项（登录错误次数）>=3
                    print "\033[31;1m登录账号锁定，请联系管理员!\033[0m" #红色字体提示锁定失败
                    break  #跳出内循环while（不会要求再次输入密码）
                else:  #用户名正确，密码不对且登录次数<3
                    j[-1] += 1 #列表最后1项（登录错误次数）自增1
                    times_left = 3-j[-1]  #定义还有几次尝试机会（剩余尝试机会+登录错误次数=3）
                    if times_left ==0: #剩余尝试机会为0
                        print "\033[31;1m登录账号锁定，请联系管理员!\033[0m" #红色字体提示锁定失败
                        break #跳出内循环while（不会要求再次输入密码）
                    else:#剩余尝试机会不是0（2次，1次）
                        print "\033[31;1m密码输入错误，请重新输入,您还有 %s 次输入机会\033[0m"% times_left #红色字体提示失败
        j[-1] = str(j[-1])#列表最后1项（登录错误次数）转换成字符串类型，方便写入到文件  缩进必须在if username == j[0]同级
        new_list.append(";".join(j)) #将列表的元素用;连接join成字符串，作为元素添加到新空列表2中（修改登录次数后，写入到文件）
        # print new_list  #['jack;123;0', 'tom;123;0']

    if flag == 0: #用户标识是1代表用户存在37行，用户标识是0代表用户不存在（用户输入的用户名，文件中没有）
        print "\033[31;1m用户名不存在，请重新输入!\033[0m"  #红色字体提示失败
    else: #用户名存在的情况下，需要将修改登录次数后的字符串，重新写入到文件
        f.seek(0) #光标回到文件最开始处
        new_str = "\n".join(new_list) #用\n换行符作为连接符，连接2个字符串
        f.write(new_str) #将换行后的2个字符串写入到文件
        f.close() #关闭文件对象
        break  #文件写完后，跳出外循环（不会要求再次输入用户名）




