整体思路：
1、外层定义一个while True死循环，用于用户输入用户名（用户名输入不对的话，会一直要求输入）

2、初始工作
   1、定义2个空的列表，空列表1计划把文件中的2行字符串，分别作为列表存到这里列表变量中，
      遍历这个列表后，用于通过索引号取出用户名和密码字段，用于和用户输入的用户名和密码对比进行判断
	  
       空列表2计划将修改登录次数后的2个字符串作为元素，写入到这个列表变量中，最终用于写到文件中
   2、定义一个flag，当用户输入的用户名==列表中的索引号是0的用户名的时候，flag=1
      那么flag =0就代表用户输入的用户名不存在
   3、读写模式打开文件对象（先读后写）
      1、读文件，遍历文件对象，将字符串strip去换行符后，用split拆分成列表；
      2、将列表[-1]转换成int，便于登录次数计算
      3、将把文件中的2行字符串，分别作为列表添加这里空列表1变量中  
   4、用户输入用户名raw-input	  
   5、几个场景
        # 1 用户名为空：len(用户名)==0
		# 2 用户名不存在：flag =0
		# 3 用户名存在:  用户输入的用户名==子列表[0]
			#   a 用户名和密码都正确 登录次数改为0 break退出当前循环 sys.exit()退出整个程序
			#   b 密码错误 登录次数+1(列表中)  将修改后的列表转换成字符串，写入到文件
			
3、遍历内部含有2个列表的列表		

4、内层定义一个while True死循环，用于用户输入密码（密码输入不对的话，会一直要求输入，直到break跳出内循环）
   1、密码输入raw_input(或者getpass-密码看不见)
   2、密码判断（用户名正确的前提下）
      1、分支1：密码正确且登录次数小于3，提示登录成功；
	  2、分支2：登录次数大于等于3，提示用户锁定；
	  3、分支3、密码错误（登录次数+1）,提示还有几次登录机会；
   3、将登录次数转换成str
   4、将修改后的字符串添加到空列表2

5、判断用户不存在 if flag == 0  ，提示用户不存在，用户重新输入，回到外循环while

6、如果用户存在的话
   1、光标seek(0)到文件最开始
   2、将修改了登录次数的列表（空列表2中的数据） ，用换行符\n 连接join成一个多行字符串
   3、write这个字符串到文件对象
   4、关闭文件对象   
   5、break 跳出外循环


# 整体思路分支：
# 分支1：用户名为空
# 分支2：用户名不存在
# 分支3：用户名密码正确，登录成功，登录此次置为1
# 分支4：用户名正确，但是登录次数大于3，锁定
# 分支5：用户名正确，密码每错误一次，登录次数加1，登录次数为3的时候，锁定
# （这里每次密码错误，只会要求重新输入密码，不用再次输入用户名了）

# 登录接口涉及知识点：
# 1、字典和列表的取值方式：列表通过索引取出用户名、密码、错误登录次数；字典通过key取值
# 2、读写文件
#    1、读文件：1for遍历 2strip去换行 3split拆成列表 4错误登录次数转换成数字，便于计算 5将2个子列表append到空列表中
#    2、写文件：1列表最后一项错误登录次数转换成str 2将列表用;连接符join成字符串作为列表的元素，append到空列表2
#       3光标来到文件最开始seek(0) 4将空列表2的2个元素用连接符\n连接join成一个换行的2行字符串
#       5写入文件 6关闭文件
# 3、多次嵌套循环的跳出
# 4、异常处理：错误登录次数不少数字，锁定
# 5、用户是否存在的标识flag
# 6、颜色提示语
#    加颜色：成功绿色 失败红色
#    '\033[32;1m登录成功，欢迎%s\033[0m'     --绿色
#    '\033[31;1m用户"%s"已锁定，请联系管理员\033[0m'   --红色
# 7、getpass不明文显示密码