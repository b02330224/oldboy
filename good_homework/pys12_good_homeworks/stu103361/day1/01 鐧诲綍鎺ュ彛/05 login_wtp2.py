__author__ = 'Administrator'
# -*- coding:utf-8 -*-
import getpass

# 整体思路：
# 分支1：用户名为空
# 分支2：用户名不存在
# 分支3：用户名密码正确，登录成功，登录此次置为1
# 分支4：用户名正确，但是登录次数大于3，锁定
# 分支5：用户名正确，密码每错误一次，登录次数加1，登录次数为3的时候，锁定
#  （这里每次密码错误，都会要求重新输入用户名和密码）

# 登录接口涉及知识点：
# 1、字典和列表的取值方式：列表通过索引取出用户名、密码、错误登录次数；字典通过key取值
# 2、读写文件
#    1、读文件：1for遍历 2strip去换行 3split拆成列表 4错误登录次数转换成数字，便于计算 5将2个子列表append到空列表中
#    2、写文件：1列表最后一项错误登录次数转换成str 2将列表用;连接符join成字符串作为列表的元素，append到空列表2
#       3光标来到文件最开始seek(0) 4将空列表2的2个元素用连接符\n连接join成一个换行的2行字符串
#       5写入文件 6关闭文件
# 3、多次嵌套循环的跳出
# 4、异常处理：错误登录次数不少数字，锁定
# 5、用户是否存在的标识flag
# 6、颜色提示语
#    加颜色：成功绿色 失败红色
#    '\033[32;1m登录成功，欢迎%s\033[0m'     --绿色
#    '\033[31;1m用户"%s"已锁定，请联系管理员\033[0m'   --红色
# 7、getpass不明文显示密码

while True: #定义一个用户名，用户名为空或者不存在的情况，会重复要求输入，直到输入正确或者break
    old_list = [] #定义空列表1，用于将文件中的内容读入（遍历文件for、去掉换行符strip、拆分成列表split）
    new_list = [] #定义空列表2,用于将错误登录次数修改后，再从内存（列表转换成字符串\njoin）写入到文件
    break_flag = False #定义外循环跳出标识，内循环break前，先将这个置为true，再跳出外循环
    flag = 0 #定义用户名是否存在，用户名存在置为1，不存在就是0
    f = open("userinfo.txt","r+")  #读写模式将文件内容读取到文件对象
    for i in f:  #遍历文件，将文件读出来
        # print i,  #jack;123;0
        list_value = i.strip().split(";") #将字符串去换行，以;作为分隔符拆分成列表
        # print list_value   #['jack', '123', '0']
        try:
            list_value[-1] = int(list_value[-1])  #将列表最后1项转换成int，用于计算错误登录次数
        except Exception,e:  #如果错误登录次数不是数字，就将它职位数字3，执行锁定操作
            list_value[-1] = 3
        old_list.append(list_value) #将2个子列表作为元素添加到空列表1中（遍历空列表1可以两2个子列表取出来）
        # print old_list  #[['jack', '123', 0], ['tom', '123', 0]]

    username = raw_input("请输入用户名:") #要求用户输入用户名
    if len(username) ==0: #判断用户名是否为空
        print "\033[31;1m用户名不能为空\033[0m" #红色字体提示失败
        continue  #跳出本次循环（本次迭代之后的代码不执行），开始下一次迭代，重新要求用户输入用户名

    for line in old_list: #遍历列表，取出2个子列表
        if username == line[0]: #如果用户名输入正确，子列表的第一项（索引号是0）是用户名
            flag =1  #用户名存在，将flag置为1
            while True:  #定义一个while内循环，用于要求用户输入密码，密码不对的情况，会重复要求输入，直到输入正确break或者其他锁定break
                passwd = raw_input("请输入密码:") #要求用户输入密码
                # passwd = getpass.getpass("请输入密码:")  #密码不是密文的形式显示
                if passwd == line[1] and line[-1]<3: #如果密码正确（子列表的第2项（索引号是1）是密码），且错误登录次数子列表的最后1项<3
                    line[-1] = 0  #将错误登录次数置为0
                    print "\33[32;1m登录成功\033[0m",username  #绿色字体提示成功
                    break_flag = True #跳出内循环前，先将外循环跳出标识置为True
                    break #跳出内循环
                elif line[-1]>=3: #如果错误登录次数（子列表的最后1项）>=3
                    print "\033[31;1m账号锁定，请联系管理员\033[0m" #红色字体提示锁定
                    break_flag = True #跳出内循环前，先将外循环跳出标识置为True
                    break #跳出内循环
                else: #如果密码错误，且错误登录次数（子列表的最后1项）<3
                    line[-1] += 1  #错误登录次数（子列表的最后1项）+1
                    left_times = 3 - line[-1] #定义剩余尝试次数（错误登录次数+剩余尝试次数=3）
                    if left_times == 0: #如果剩余尝试次数为0
                        print "\033[31;1m账号锁定，请联系管理员\033[0m" #红色字体提示锁定
                        break_flag = True #跳出内循环前，先将外循环跳出标识置为True
                        break #跳出内循环
                    else: #如果剩余尝试次数不为0（2次，1次）
                        print "\033[31;1m用户名或者密码输入错误，您还有%s次尝试机会\033[0m" % left_times
                        # break_flag = True
                        break #跳出内循环 ，回到31行，要求再次输入密码
        line[-1] = str(line[-1]) #列表最后1项（登录错误次数）转换成字符串类型，方便写入到文件  缩进必须在if username == j[0]同级
        new_list.append(";".join(line))#将列表的元素用;连接join成字符串，作为元素添加到新空列表2中（修改登录次数后，写入到文件）
        # print new_list
    if flag == 0:  #用户标识是1代表用户存在37行，用户标识是0代表用户不存在（用户输入的用户名，文件中没有）
        print "\033[31;1m用户名不存在，请重新输入\033[0m" #红色字体提示失败
    else: #用户名存在的情况下，需要将修改登录次数后的字符串，重新写入到文件
        f.seek(0) #光标回到文件最开始处
        my_str = "\n".join(new_list) #用\n换行符作为连接符，连接2个字符串
        f.write(my_str) #将换行后的2个字符串写入到文件
        f.close() #关闭文件对象
        if break_flag: #判断内循环跳出前，是否将这个标识改成True
            break  #文件写完后，跳出外循环（不会要求再次输入用户名）